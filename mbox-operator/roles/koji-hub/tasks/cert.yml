- name: create temporary cert directory
  tempfile:
    state: directory
    prefix: kojihub
    suffix: cert
  register: cert_dir

- block:
    - set_fact:
        koji_hub_ca_cert_secret: "{{ k8s_mboxes.resources[0].spec.root_ca_secret_name }}"
  when: koji_mbox|length > 0

# koji-hub ca cert
- name: Root CA creation
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ koji_hub_ca_cert_secret }}"
    namespace: "{{ meta.namespace }}"
  register: k8s_cacert_query
- block:
    - openssl_privatekey:
        path: "{{ cert_dir.path }}/ca_key.pem"
        size: 4096
    - openssl_csr:
        path: "{{ cert_dir.path }}/ca_req.pem"
        privatekey_path: "{{ cert_dir.path }}/ca_key.pem"
        common_name: "{{ koji_hub_host }}"
        create_subject_key_identifier: true
        key_usage:
          - cRLSign
          - dataEncipherment
          - digitalSignature
          - keyCertSign
          - keyEncipherment
          - nonRepudiation
        basic_constraints:
          - 'CA:TRUE'
    - openssl_certificate:
        path: "{{ cert_dir.path }}/ca_cert.pem"
        privatekey_path: "{{ cert_dir.path }}/ca_key.pem"
        csr_path: "{{ cert_dir.path }}/ca_req.pem"
        provider: selfsigned
    - k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ koji_hub_ca_cert_secret }}"
            namespace: "{{ meta.namespace }}"
            labels:
              app: koji-hub
          data:
            csr: "{{ lookup('file', cert_dir.path + '/ca_req.pem') | b64encode }}"
            cert: "{{ lookup('file', cert_dir.path + '/ca_cert.pem') | b64encode }}"
            key: "{{ lookup('file', cert_dir.path + '/ca_key.pem') | b64encode }}"
      when: k8s_cacert_query.resources|length == 0
    - copy:
        src: "{{  cert_dir.path }}/ca_cert.pem"
        dest: "{{ lookup('env', 'HOME') }}/.koji/certs/ca.pem"
  when: koji_mbox|length == 0

# koji-hub httpd cert
- name: check if server cert exists
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ koji_hub_service_cert_secret }}"
    namespace: "{{ meta.namespace }}"
  register: k8s_servicecert_query
- block:
    - name: Server certificate creation
      openssl_privatekey:
        path: "{{ cert_dir.path }}/server_key.pem"
        size: 4096
    - openssl_csr:
        path: "{{ cert_dir.path }}/server_req.pem"
        privatekey_path: "{{ cert_dir.path }}/server_key.pem"
        common_name: "{{ koji_hub_host }}"
        subject_alt_name:
          - "DNS:{{ koji_hub_host }}"
          - "DNS:{{ koji_hub_svc_name }}"
          - "DNS:{{ koji_hub_svc_name }}.{{ meta.namespace }}.svc"
          - "DNS:{{ koji_hub_svc_name }}.{{ meta.namespace }}.svc.cluster"
    - openssl_certificate:
        path: "{{ cert_dir.path }}/server_cert.pem"
        csr_path: "{{ cert_dir.path }}/server_req.pem"
        ownca_path: "{{ cert_dir.path }}/ca_cert.pem"
        ownca_privatekey_path: "{{ cert_dir.path }}/ca_key.pem"
        provider: ownca
    - k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ koji_hub_service_cert_secret }}"
            namespace: "{{ meta.namespace }}"
            labels:
              app: koji-hub
          data:
            tls.crt: "{{ lookup('file', cert_dir.path + '/server_cert.pem') | b64encode }}"
            tls.key: "{{ lookup('file', cert_dir.path + '/server_key.pem') | b64encode }}"
          type: kubernetes.io/tls
  when: k8s_servicecert_query.resources|length == 0

# koji-hub admin client cert
- name: check if admin client cert exists
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ koji_hub_admin_client_cert }}"
    namespace: "{{ meta.namespace }}"
  register: k8s_admin_cert_query
- block:
    - name: Admin user certificate creation
      openssl_privatekey:
        path: "{{ cert_dir.path }}/admin_key.pem"
        size: 4096
    - openssl_csr:
        path: "{{ cert_dir.path }}/admin_req.pem"
        privatekey_path: "{{ cert_dir.path }}/admin_key.pem"
        common_name: "{{ koji_hub_admin_username }}"
    - openssl_certificate:
        path: "{{ cert_dir.path }}/admin_cert.pem"
        csr_path: "{{ cert_dir.path }}/admin_req.pem"
        ownca_path: "{{ cert_dir.path }}/ca_cert.pem"
        ownca_privatekey_path: "{{ cert_dir.path }}/ca_key.pem"
        provider: ownca
    - k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ koji_hub_admin_client_cert }}"
            namespace: "{{ meta.namespace }}"
            labels:
              app: koji-hub
          data:
            client.pem: "{{ (lookup('file', cert_dir.path + '/admin_key.pem') + '\n' + lookup('file', cert_dir.path + '/admin_cert.pem')) | b64encode }}"
    - copy:
        content: "{{ lookup('file', cert_dir.path + '/admin_key.pem') + '\n' + lookup('file', cert_dir.path + '/admin_cert.pem') }}"
        dest: "{{ lookup('env', 'HOME') }}/.koji/certs/kojiadmin.pem"
  when: k8s_admin_cert_query.resources|length == 0

# koji-web client cert
- name: check if kojiweb client cert exists
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ koji_hub_web_client_cert }}"
    namespace: "{{ meta.namespace }}"
  register: k8s_web_cert_query
- block:
    - openssl_privatekey:
        path: "{{ cert_dir.path }}/client_web_key.pem"
        size: 4096
    - openssl_csr:
        path: "{{ cert_dir.path }}/client_web_req.pem"
        privatekey_path: "{{ cert_dir.path }}/client_web_key.pem"
        common_name: "{{ koji_hub_web_client_username }}"
    - openssl_certificate:
        path: "{{ cert_dir.path }}/client_web_cert.pem"
        csr_path: "{{ cert_dir.path }}/client_web_req.pem"
        ownca_path: "{{ cert_dir.path }}/ca_cert.pem"
        ownca_privatekey_path: "{{ cert_dir.path }}/ca_key.pem"
        provider: ownca
    - k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ koji_hub_web_client_cert }}"
            namespace: "{{ meta.namespace }}"
            labels:
              app: koji-hub
          data:
            client.pem: "{{ (lookup('file', cert_dir.path + '/client_web_key.pem') + '\n' + lookup('file', cert_dir.path + '/client_web_cert.pem')) | b64encode }}"
  when: k8s_web_cert_query.resources|length == 0

- name: cleanup
  file:
    path: "{{ cert_dir.path }}"
    state: absent
