---
- block:
    - name: set koji-hub config file
      file:
        path: "{{ lookup('env', 'HOME') }}/.koji/{{ item }}"
        state: directory
      with_items:
        - config.d
        - certs
    - template:
        src: kojiadmin.conf.j2
        dest: "{{ lookup('env', 'HOME') }}/.koji/config.d/kojiadmin.conf"
      vars:
        kojiadmin_cert_path: "{{ lookup('env', 'HOME') }}/.koji/certs/kojiadmin.pem"
        kojiadmin_ca_cert_path: "{{ lookup('env', 'HOME') }}/.koji/certs/ca.pem"

- block:
    - name: retrieve mbox resource
      k8s_info:
        api_version: apps.fedoraproject.org/v1alpha1
        kind: Mbox
        namespace: "{{ meta.namespace }}"
        name: "{{ koji_mbox }}"
      register: k8s_mboxes
    - fail:
        msg: "Failed to find mbox {{ koji_mbox }} in namespace {{ meta.namespace }}"
      when: k8s_mboxes.resources|length == 0
  when: koji_mbox|length > 0

- set_fact:
    koji_hub_postgres_secret: "{{ k8s_mboxes.resources[0].spec.psql_secret_name }}"
  when: koji_mbox|length > 0

- block:
    - name: Retrieve postgresql secret
      k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ meta.namespace }}"
        name: "{{ koji_hub_postgres_secret }}"
      register: k8s_psql_secrets
    - fail:
        msg: "Secret {{ koji_hub_postgres_secret }} not found in namespace {{ meta.namespace }}"
      when: k8s_psql_secrets.resources|length == 0
    - set_fact:
        psql_secret: "{{ k8s_psql_secrets.resources[0] }}"

- block:
    - name: Check if messaging secret exists
      k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ meta.namespace }}"
        name: "{{ koji_hub_messaging_cert_secret }}"
      register: k8s_msg_secret
    - fail:
        msg: "Secret {{ koji_hub_messaging_cert_secret }} not found in namespace {{ meta.namespace }}"
      when: k8s_msg_secret.resources|length == 0

- block:
    - name: Ensure koji-hub configmap is updated
      template:
        src: configmap.yml.j2
        dest: /tmp/configmap.yml
      vars:
        koji_hub_psql_host: "{{ psql_secret.data.POSTGRES_HOST | b64decode }}"
        koji_hub_psql_db: "{{ psql_secret.data.POSTGRES_DB | b64decode }}"
        koji_hub_psql_user: "{{ psql_secret.data.POSTGRES_USER | b64decode }}"
        koji_hub_psql_password: "{{ psql_secret.data.POSTGRES_PASSWORD | b64decode }}"
        koji_hub_fedora_messaging_url: "{{ fedora_messaging_url }}"
        koji_hub_topic_prefix: "{{ topic_prefix }}"

    - k8s:
        state: present
        src: /tmp/configmap.yml
        wait: true
        namespace: "{{ meta.namespace }}"

    - file:
        path: /tmp/configmap.yml
        state: absent

- include_tasks: cert.yml

- block:
    - name: PVC creation
      k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ meta.namespace }}"
        name: "{{ koji_hub_httpd_pvc_name }}"
      register: k8s_httpd_pvc
    - include_tasks: pvc.yml
      vars:
        pvc_name: "{{ koji_hub_httpd_pvc_name }}"
        pvc_size: "{{ koji_hub_httpd_pvc_size }}"
        pvc_namespace: "{{ meta.namespace }}"
      when: k8s_httpd_pvc.resources|length == 0
    - k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ meta.namespace }}"
        name: "{{ koji_hub_mnt_pvc_name }}"
      register: k8s_mnt_pvc
    - include_tasks: pvc.yml
      vars:
        pvc_name: "{{ koji_hub_mnt_pvc_name }}"
        pvc_size: "{{ koji_hub_mnt_pvc_size }}"
        pvc_namespace: "{{ meta.namespace }}"
      when:
        - koji_mbox|length == 0
        - k8s_mnt_pvc.resources|length == 0

- block:
    - name: retrieve and set shared pvc name
      set_fact:
        koji_hub_mnt_pvc_name: "{{ k8s_mboxes.resources[0].spec.koji_pvc_name }}"
  when: koji_mbox|length > 0

- block:
    - name: Apply koji-hub http service
      template:
        src: service.yml.j2
        dest: /tmp/service.yml
    - k8s:
        state: present
        src: /tmp/service.yml
        wait: true
        namespace: "{{ meta.namespace }}"
  when: koji_hub_http_enabled

- block:
    - name: Apply koji-hub ingress
      template:
        src: ingress.yml.j2
        dest: /tmp/ingress.yml
      vars:
        koji_hub_ingress_name: koji-hub-http
        koji_hub_ingress_svc: "{{ koji_hub_svc_name }}"
        koji_hub_ingress_port: "{{ koji_hub_http_port }}"
    - k8s:
        state: present
        src: /tmp/ingress.yml
        wait: true
        namespace: "{{ meta.namespace }}"
  when: koji_hub_ingress_backend != 'openshift'

- block:
    - name: Apply koji-hub openshift route
      template:
        src: openshift-route.yml.j2
        dest: /tmp/openshift-route.yml
      vars:
        koji_hub_route_name: koji
        koji_hub_route_svc: "{{ koji_hub_svc_name }}"
    - k8s:
        state: present
        src: /tmp/openshift-route.yml
        wait: true
        namespace: "{{ meta.namespace }}"
  when: koji_hub_ingress_backend == 'openshift'

- block:
    - name: Apply koji-hub deployment
      template:
        src: deployment.yml.j2
        dest: /tmp/deployment.yml
    - k8s:
        state: present
        src: /tmp/deployment.yml
        wait: true
        namespace: "{{ meta.namespace }}"
    - file:
        path: /tmp/deployment.yml
        state: absent

# it creates an user using the same username used in the admin cert CN field
# and grants admin perms (user_perms table) to it.
# it ignores any kind of conflict errors in case the user already exists.
- block:
    - name: psql admin user setup
      set_fact:
        psql_host: "{{ psql_secret.data.POSTGRES_HOST | b64decode }}.{{ psql_secret.metadata.namespace }}.svc"
    - postgresql_query:
        db: "{{ psql_secret.data.POSTGRES_DB | b64decode }}"
        login_host: "{{ psql_host }}"
        login_user: "{{ psql_secret.data.POSTGRES_USER | b64decode }}"
        login_password: "{{ psql_secret.data.POSTGRES_PASSWORD | b64decode }}"
        query: INSERT INTO users(name, status, usertype) VALUES('{{ koji_hub_admin_username }}', 0, 0) ON CONFLICT DO NOTHING
    - postgresql_query:
        db: "{{ psql_secret.data.POSTGRES_DB | b64decode }}"
        login_host: "{{ psql_host }}"
        login_user: "{{ psql_secret.data.POSTGRES_USER | b64decode }}"
        login_password: "{{ psql_secret.data.POSTGRES_PASSWORD | b64decode }}"
        query: SELECT * FROM users WHERE name='{{ koji_hub_admin_username }}'
      register: psql_user_query
    - postgresql_query:
        db: "{{ psql_secret.data.POSTGRES_DB | b64decode }}"
        login_host: "{{ psql_host }}"
        login_user: "{{ psql_secret.data.POSTGRES_USER | b64decode }}"
        login_password: "{{ psql_secret.data.POSTGRES_PASSWORD | b64decode }}"
        query: INSERT INTO user_perms (user_id, perm_id, creator_id) VALUES ({{ psql_user_query.query_result[0].id }}, 1, 1) ON CONFLICT DO NOTHING
